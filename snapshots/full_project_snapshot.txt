Project Structure:

File Contents:

File: ./CHANGELOG.md
----------------------------------------
----------------------------------------

File: ./config/webpack.config.md
----------------------------------------
# webpack.config

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./specs/deck_management/export_deck.feature
----------------------------------------
Feature: Export deck to JSON
  As a user
  I want to export my deck to a JSON file
  So that I can backup my work or share it with others

  Background:
    Given I am on the deck management page
    And I have a deck named "Physics" with 15 existing cards

  Scenario: Successfully export deck to JSON
    When I select the "Physics" deck
    And I click the "Export to JSON" button
    Then a JSON file should be downloaded
    And the file should be named "Physics_deck.json"
    And the JSON file should contain all 15 cards with their content

  Scenario: Export deck with complex elements
    Given I have a deck with cards containing text and shapes
    When I export the deck to JSON
    Then the JSON file should include all elements of each card
    And the positioning and styling of elements should be preserved

  Scenario: Validate exported JSON
    When I export a deck to JSON
    And I import the JSON file back into the application
    Then all cards should be recreated exactly as they were before export

  Scenario: Export empty deck
    Given I have an empty deck named "New Deck"
    When I select the "New Deck"
    And I click the "Export to JSON" button
    Then a JSON file named "New_Deck.json" should be downloaded
    And the JSON file should contain an empty array of cards----------------------------------------

File: ./specs/deck_management/remove_card_from_deck.feature
----------------------------------------
Feature: uremove card from deck

  As a user
  I want to remove card from deck
  So that I can effectively manage my flash cards

  Scenario: Successful remove card from deck
    Given I am on the deck management page
    When I perform the necessary actions to remove card from deck
    Then I should see the expected result

  Scenario: Unsuccessful remove card from deck
    Given I am on the deck management page
    When I perform invalid actions
    Then I should see an appropriate error message
----------------------------------------

File: ./specs/deck_management/create_deck.feature
----------------------------------------
Feature: ucreate deck

  As a user
  I want to create deck
  So that I can effectively manage my flash cards

  Scenario: Successful create deck
    Given I am on the deck management page
    When I perform the necessary actions to create deck
    Then I should see the expected result

  Scenario: Unsuccessful create deck
    Given I am on the deck management page
    When I perform invalid actions
    Then I should see an appropriate error message
----------------------------------------

File: ./specs/deck_management/add_card_to_deck.feature
----------------------------------------
Feature: uadd card to deck

  As a user
  I want to add card to deck
  So that I can effectively manage my flash cards

  Scenario: Successful add card to deck
    Given I am on the deck management page
    When I perform the necessary actions to add card to deck
    Then I should see the expected result

  Scenario: Unsuccessful add card to deck
    Given I am on the deck management page
    When I perform invalid actions
    Then I should see an appropriate error message
----------------------------------------

File: ./specs/deck_management/delete_deck.feature
----------------------------------------
Feature: Delete a deck
  As a user
  I want to delete a deck
  So that I can remove unnecessary or outdated collections of cards

  Background:
    Given I am on the deck management page
    And I have at least one existing deck

  Scenario: Successfully delete a deck
    When I select a deck to delete
    And I click the "Delete Deck" button
    Then I should see a confirmation dialog
    When I confirm the deletion
    Then I should see a success message
    And the deck should no longer appear in my deck list

  Scenario: Cancel deck deletion
    When I select a deck to delete
    And I click the "Delete Deck" button
    Then I should see a confirmation dialog
    When I cancel the deletion
    Then the deck should still appear in my deck list

  Scenario: Delete a deck with cards
    Given I have a deck "Physics Formulas" with 10 cards
    When I delete the "Physics Formulas" deck
    Then I should see a warning message about deleting all associated cards
    When I confirm the deletion
    Then I should see a success message
    And the "Physics Formulas" deck and its cards should be removed from my account

  Scenario: Attempt to delete the last deck
    Given I have only one deck in my account
    When I try to delete the deck
    Then I should see a warning message
    And I should be asked to create a new deck before deleting the last one----------------------------------------

File: ./specs/deck_management/edit_deck.feature
----------------------------------------
Feature: Edit an existing deck
  As a user
  I want to edit an existing deck
  So that I can update its name, description, or organization

  Background:
    Given I am on the deck management page
    And I have an existing deck named "History Dates"

  Scenario: Edit deck name and description
    When I select the "History Dates" deck
    And I click "Edit Deck"
    And I change the name to "Important Historical Events"
    And I update the description to "Key dates and events in world history"
    And I click "Save Changes"
    Then I should see a success message
    And the deck should be updated with the new name and description

  Scenario: Add tags to an existing deck
    When I select the "History Dates" deck
    And I click "Edit Deck"
    And I add tags "history, dates, academic"
    And I click "Save Changes"
    Then I should see a success message
    And the deck should be updated with the new tags

  Scenario: Reorder cards within a deck
    Given the "History Dates" deck has at least 3 cards
    When I select the "History Dates" deck
    And I click "Edit Deck"
    And I drag the third card to the first position
    And I click "Save Changes"
    Then I should see a success message
    And the cards in the deck should be in the new order

  Scenario: Attempt to save a deck with an empty name
    When I select the "History Dates" deck
    And I click "Edit Deck"
    And I delete the deck name
    And I click "Save Changes"
    Then I should see an error message "Deck name cannot be empty"
    And the deck should not be updated----------------------------------------

File: ./specs/card_editor/delete_card.feature
----------------------------------------
Feature: Delete a flash card
  As a user
  I want to delete a flash card
  So that I can remove unnecessary or incorrect cards from my deck

  Background:
    Given I am on the card management page
    And I have at least one existing card

  Scenario: Successfully delete a card
    When I select a card to delete
    And I click the "Delete" button
    Then I should see a confirmation dialog
    When I confirm the deletion
    Then I should see a success message
    And the card should no longer appear in my card list

  Scenario: Cancel card deletion
    When I select a card to delete
    And I click the "Delete" button
    Then I should see a confirmation dialog
    When I cancel the deletion
    Then the card should still appear in my card list

  Scenario: Delete the last card in a deck
    Given I have only one card in my deck
    When I delete the card
    Then I should see a success message
    And I should see an empty deck message
    And I should see an option to create a new card

  Scenario: Attempt to delete a card that is part of a study session
    Given I have an active study session
    When I try to delete a card that is part of the session
    Then I should see a warning message
    And I should be asked to end the study session before deleting the card----------------------------------------

File: ./specs/card_editor/edit_card.feature
----------------------------------------
Feature: Edit an existing flash card
  As a user
  I want to edit an existing flash card
  So that I can update or correct its content

  Background:
    Given I am on the card editor page
    And I have an existing card with content

  Scenario: Edit text on an existing card
    When I select the existing card
    And I modify the text on Side A to "Updated question"
    And I modify the text on Side B to "Updated answer"
    And I click "Save Changes"
    Then I should see a success message
    And the card should be updated with the new content

  Scenario: Add a shape to an existing card
    When I select the existing card
    And I add a triangle to Side A
    And I click "Save Changes"
    Then I should see a success message
    And the card should be updated with the new shape

  Scenario: Change colors on an existing card
    When I select the existing card
    And I change the background color of Side A to green
    And I change the text color of Side B to red
    And I click "Save Changes"
    Then I should see a success message
    And the card should be updated with the new colors

  Scenario: Attempt to save a card with empty content
    When I select the existing card
    And I delete all content from Side A
    And I click "Save Changes"
    Then I should see an error message "Card must have content on both sides"
    And the card should not be updated

  Scenario: Cancel editing a card
    When I select the existing card
    And I modify the text on Side A
    And I click "Cancel"
    Then I should see a confirmation dialog
    When I confirm the cancellation
    Then the card should not be updated
    And I should return to the card list view

  Background:
    Given I am on the card editor page
    And I am viewing the "Physics" deck with existing cards

  Scenario: Edit both sides of an existing card
    When I select "Card 1: Newton's First Law" from the card list
    Then I should see Side A and Side B of the card displayed side by side
    When I modify the text on Side A to "Updated question"
    And I modify the text on Side B to "Updated answer"
    And I click "Save"
    Then I should see a success message
    And the card should be updated with the new content on both sides

  Scenario: Add shapes to both sides of a card
    When I select an existing card from the list
    And I add a rectangle to Side A
    And I add a circle to Side B
    Then I should see the shapes on their respective sides simultaneously

  Scenario: Undo changes on one side
    When I select an existing card from the list
    And I make changes to Side A
    And I click the undo button for Side A
    Then only the changes on Side A should be undone
    And Side B should remain unchanged

    Feature: Edit an existing flash card

  Background:
    Given I am on the card editor page
    And I am viewing the "Physics" deck with existing cards

  Scenario: Edit both sides of an existing card
    When I select "Card 1: Newton's First Law" from the card list
    Then I should see Side A and Side B of the card displayed side by side
    When I modify the text on Side A to "Updated question"
    And I modify the text on Side B to "Updated answer"
    And I click "Save"
    Then I should see a success message
    And the card should be updated with the new content on both sides

  Scenario: Add shapes to both sides of a card
    When I select an existing card from the list
    And I add a rectangle to Side A
    And I add a circle to Side B
    Then I should see the shapes on their respective sides simultaneously

  Scenario: Undo changes on one side
    When I select an existing card from the list
    And I make changes to Side A
    And I click the undo button for Side A
    Then only the changes on Side A should be undone
    And Side B should remain unchanged----------------------------------------

File: ./specs/card_editor/create_card.feature
----------------------------------------
Feature: Create a new flash card
  As a user
  I want to create a new flash card
  So that I can add content to my study decks

  Background:
    Given I am on the card editor page

  Scenario: Successfully create a basic flash card
    When I click on "New Card"
    And I add text "What is the capital of France?" to Side A
    And I add text "Paris" to Side B
    And I click "Save Card"
    Then I should see a success message
    And the new card should appear in my card list

  Scenario: Create a card with shapes and text
    When I click on "New Card"
    And I add a rectangle to Side A
    And I add text "Shape:" inside the rectangle on Side A
    And I add a circle to Side B
    And I add text "Circle" inside the circle on Side B
    And I click "Save Card"
    Then I should see a success message
    And the new card should appear in my card list with shapes and text

  Scenario: Attempt to create an empty card
    When I click on "New Card"
    And I click "Save Card" without adding any content
    Then I should see an error message "Card must have content on both sides"

  Scenario: Create a card with custom colors
    When I click on "New Card"
    And I add text "Color question" to Side A
    And I change the text color to blue on Side A
    And I add text "Blue" to Side B
    And I change the background color to blue on Side B
    And I click "Save Card"
    Then I should see a success message
    And the new card should appear in my card list with custom colors

Background:
  Given I am on the card editor page
  And I am viewing the "Physics" deck with 15 existing cards

Scenario: Successfully create a new flash card
  When I click on "Create New Card"
  And I add text "What is the speed of light?" to Side A
  And I add text "299,792,458 meters per second" to Side B
  And I click "Save"
  Then I should see a success message
  And the card list should update to show 16 cards
  And the new card should appear at the bottom of the card list

Scenario: View newly created card in the list
  When I create a new card with the question "What is Newton's Second Law?"
  Then I should see the new card in the card list
  And the card count should increase by 1

Scenario: Edit both sides simultaneously
  When I create a new card
  Then I should be able to edit Side A and Side B simultaneously
  And changes on one side should not affect the other side

Scenario: View newly created card in the list
  When I create a new card with the question "What is Newton's Second Law?" on Side A
  And I add the answer "F = ma" on Side B
  Then I should see the new card in the card list
  And the card count should increase by 1


  Feature: Create a new flash card

  Background:
    Given I am on the card editor page
    And I am viewing the "Physics" deck with 15 existing cards

  Scenario: Successfully create a new flash card
    When I click on "Create New Card"
    Then I should see two empty canvases labeled "Side A" and "Side B"
    When I add text "What is the speed of light?" to Side A
    And I add text "299,792,458 meters per second" to Side B
    And I click "Save"
    Then I should see a success message
    And the card list should update to show 16 cards
    And the new card should appear at the bottom of the card list

  Scenario: Edit both sides simultaneously
    When I create a new card
    Then I should be able to edit Side A and Side B simultaneously
    And changes on one side should not affect the other side

  Scenario: View newly created card in the list
    When I create a new card with the question "What is Newton's Second Law?" on Side A
    And I add the answer "F = ma" on Side B
    Then I should see the new card in the card list
    And the card count should increase by 1----------------------------------------

File: ./README.md
----------------------------------------
# Flash Card Creator

## Project Overview

Flash Card Creator is a web application designed to help users create and manage digital flash cards. This tool allows users to create visually rich flash cards and organize them into decks for easy management and export.

## Key Features

- Intuitive card editor with drag-and-drop interface
- Support for text and basic shapes
- Two-sided card creation (Side A and Side B)
- Deck management for organizing cards
- JSON export functionality for sharing decks
- Responsive design for desktop and tablet use

## Technology Stack

- Frontend: React with TypeScript
- State Management: Redux Toolkit
- UI Components: Material-UI (MUI)
- Canvas Manipulation: Konva.js with react-konva
- Form Handling: React Hook Form
- Routing: React Router
- Styling: Emotion (CSS-in-JS)
- Local Storage: localforage
- Testing: Jest, React Testing Library
- Build Tool: Webpack (via Create React App)

## Getting Started

### Prerequisites

- Node.js (v14.x or later)
- npm (v6.x or later) or Yarn

### Installation

1. Clone the repository:
   ```
   git clone https://github.com/yourusername/flash-card-creator.git
   cd flash-card-creator
   ```

2. Install dependencies:
   ```
   npm install
   ```
   or if using Yarn:
   ```
   yarn install
   ```

3. Start the development server:
   ```
   npm start
   ```
   or:
   ```
   yarn start
   ```

4. Open [http://localhost:3000](http://localhost:3000) to view the app in your browser.

## Project Structure

```
flash-card-creator/
├── public/            # Public assets
├── src/               # Source files
│   ├── components/    # Reusable React components
│   ├── pages/         # Page components
│   ├── hooks/         # Custom React hooks
│   ├── context/       # React context files
│   ├── services/      # API and service files
│   ├── utils/         # Utility functions
│   ├── types/         # TypeScript type definitions
│   ├── styles/        # Global styles and themes
│   └── constants/     # Application constants
├── tests/             # Test files
└── config/            # Configuration files
```

## Development Workflow

1. Create a new branch for each feature or bug fix.
2. Write tests for new functionality.
3. Ensure all tests pass before submitting a pull request.
4. Follow the established code style and conventions.
5. Update documentation as necessary.

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for more details.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- [List any libraries, tools, or resources that significantly contributed to the project]----------------------------------------

File: ./public/index.html
----------------------------------------
----------------------------------------

File: ./src/App.md
----------------------------------------
# App

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/types/Shape.md
----------------------------------------
# Shape

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/types/Card.md
----------------------------------------
# Card

## Purpose
Defines the structure of a flash card, including all elements on both sides.

## Properties
- id: string
- deckId: string
- sideA: CardSide
- sideB: CardSide

## CardSide
- elements: Element[]

## Element
- id: string
- type: 'text' | 'rectangle' | 'circle'
- content: string (for text)
- style: ElementStyle
- position: Position

## ElementStyle
- fontFamily?: string
- fontSize?: number
- fontColor?: string
- backgroundColor?: string
- borderColor?: string
- borderWidth?: number

## Position
- x: number
- y: number
- width: number
- height: number

## TODO
- [ ] Implement the Card type
- [ ] Create functions for manipulating Card objects
- [ ] Add validation for Card properties
- [ ] Implement JSON serialization and deserialization methods----------------------------------------

File: ./src/types/Deck.md
----------------------------------------
# Deck

## Purpose
Defines the structure of a deck, which is a collection of flash cards.

## Properties
- id: string
- name: string
- description: string
- cards: Card[]
- createdAt: Date
- updatedAt: Date

## Methods
- addCard(card: Card): void
- removeCard(cardId: string): void
- updateCard(cardId: string, updatedCard: Card): void
- exportToJSON(): string
- importFromJSON(json: string): void

## TODO
- [ ] Implement the Deck type
- [ ] Create CRUD methods for managing cards in the deck
- [ ] Implement the exportToJSON method
- [ ] Implement the importFromJSON method
- [ ] Add validation for Deck properties----------------------------------------

File: ./src/context/ThemeContext.md
----------------------------------------
# ThemeContext

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/context/AppStateContext.md
----------------------------------------
# AppStateContext

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/constants/appConstants.md
----------------------------------------
# appConstants

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/utils/shapes.md
----------------------------------------
# Shape Utilities

## Purpose
The shapes utility module provides helper functions for working with shape data in the application.

## Dependencies
- ../types/Shape

## Main Functionality
1. Create shape objects
2. Perform calculations on shapes (e.g., area, perimeter)
3. Transform shape data
4. Validate shape properties

## Utility Functions
```typescript
// Shape creation
createRectangle(x: number, y: number, width: number, height: number): Rectangle;
createCircle(x: number, y: number, radius: number): Circle;
createText(x: number, y: number, text: string): Text;

// Shape calculations
calculateArea(shape: Shape): number;
calculatePerimeter(shape: Shape): number;

// Shape transformations
scaleShape(shape: Shape, factor: number): Shape;
rotateShape(shape: Shape, angle: number): Shape;

// Validation
isValidShape(shape: Shape): boolean;
```

## TODO
- [ ] Implement shape creation functions
- [ ] Add calculation functions
- [ ] Create transformation utilities
- [ ] Implement shape validation
- [ ] Write unit tests for all functions----------------------------------------

File: ./src/utils/colorUtils.md
----------------------------------------
# Color Utilities

## Purpose
The colorUtils module provides helper functions for working with colors in the application.

## Dependencies
None

## Main Functionality
1. Convert between color formats (HEX, RGB, HSL)
2. Generate color palettes
3. Manipulate colors (lighten, darken, saturate)
4. Calculate color contrast

## Utility Functions
```typescript
// Color conversion
hexToRgb(hex: string): { r: number; g: number; b: number };
rgbToHex(r: number, g: number, b: number): string;
rgbToHsl(r: number, g: number, b: number): { h: number; s: number; l: number };

// Color manipulation
lightenColor(color: string, amount: number): string;
darkenColor(color: string, amount: number): string;
saturateColor(color: string, amount: number): string;

// Color palette
generateComplementaryColor(color: string): string;
generateAnalogousColors(color: string): string[];

// Contrast
calculateContrast(color1: string, color2: string): number;
```

## TODO
- [ ] Implement color conversion functions
- [ ] Create color manipulation utilities
- [ ] Add palette generation functions
- [ ] Implement contrast calculation
- [ ] Write unit tests for all functions----------------------------------------

File: ./src/utils/validators.md
----------------------------------------
# validators

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/styles/globalStyles.md
----------------------------------------
# globalStyles

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/styles/theme.md
----------------------------------------
# theme

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/layout/Footer.md
----------------------------------------
# Footer

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/layout/Header.md
----------------------------------------
# Header

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/layout/Sidebar.md
----------------------------------------
# Sidebar

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/cards/CardList.md
----------------------------------------
# CardList

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/cards/CardEditor.md
----------------------------------------
# CardEditor

## Purpose
The CardEditor component is the core interface for creating and editing flash cards. It provides a canvas-based environment where users can add shapes, text, and manipulate elements to design both sides of a flash card.

## Dependencies
- react
- react-konva
- @material-ui/core
- ../../hooks/useCanvas
- ../../context/AppStateContext
- ../../types/Card

## Props
- cardId: string | null (null for new card creation)
- onSave: (card: Card) => void

## Main Functionality
1. Provide a canvas for drawing and manipulating shapes and text
2. Display Side A and Side B of the card side by side
3. Offer tools for adding rectangles, circles, and text elements
4. Enable selection, movement, resizing, and deletion of elements
5. Provide color selection for shapes and text
6. Implement undo/redo functionality for edit actions
7. Save card data to local storage and trigger onSave prop

## Component Structure
```typescript
const CardEditor: React.FC<CardEditorProps> = ({ cardId, onSave }) => {
  // State management
  // Canvas setup
  // Tool selection
  // Element manipulation functions
  // Save functionality

  return (
    <div className="card-editor">
      {/* Toolbar */}
      {/* Side A Canvas */}
      {/* Side B Canvas */}
      {/* Color picker */}
      {/* Save button */}
    </div>
  );
};
```

## Key Functions
- addShape(side: 'A' | 'B', type: ShapeType): void
- addText(side: 'A' | 'B'): void
- selectElement(side: 'A' | 'B', id: string): void
- moveElement(side: 'A' | 'B', id: string, x: number, y: number): void
- resizeElement(side: 'A' | 'B', id: string, width: number, height: number): void
- deleteElement(side: 'A' | 'B', id: string): void
- saveCard(): void

## State Management
- Use local state for transient properties (selected element, current tool)
- Use AppStateContext for sharing card data across components

## TODO
- [ ] Implement basic canvas setup with react-konva
- [ ] Create toolbar with shape and text tools
- [ ] Implement shape and text addition functionality
- [ ] Add selection and manipulation capabilities
- [ ] Create save functionality
- [ ] Add undo/redo feature
- [ ] Implement color picking for elements
- [ ] Write unit tests for core functions----------------------------------------

File: ./src/components/cards/CardViewer.md
----------------------------------------
# CardViewer

## Purpose
The CardViewer component displays a single flash card, allowing users to flip between Side A and Side B. It's used in both study mode and deck management.

## Dependencies
- react
- @material-ui/core
- ../../types/Card
- ../../hooks/useCard

## Props
- cardId: string
- onFlip?: () => void

## Main Functionality
1. Display the current side of the card (A or B)
2. Provide a mechanism to flip the card
3. Render shapes and text as defined in the card data
4. Optionally trigger onFlip callback when the card is flipped

## Component Structure
```typescript
const CardViewer: React.FC<CardViewerProps> = ({ cardId, onFlip }) => {
  // State for current side
  // Card data fetching logic

  return (
    <div className="card-viewer">
      {/* Card content rendering */}
      {/* Flip button */}
    </div>
  );
};
```

## TODO
- [ ] Implement card data fetching
- [ ] Create rendering logic for shapes and text
- [ ] Add flip functionality
- [ ] Implement smooth flip animation
- [ ] Write unit tests----------------------------------------

File: ./src/components/decks/DeckItem.md
----------------------------------------
# DeckItem

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/decks/DeckManager.md
----------------------------------------
# DeckManager

## Purpose
The DeckManager component provides an interface for creating, viewing, updating, and deleting decks of flash cards. It also allows users to manage cards within each deck and export decks to JSON.

## Dependencies
- react
- @material-ui/core
- react-beautiful-dnd
- ../../hooks/useDeck
- ../../services/storage
- ../cards/CardList
- ../../types/Deck

## Props
None (manages its own state)

## Main Functionality
1. Display a list of all decks
2. Allow creation of new decks
3. Enable editing of deck names and descriptions
4. Provide functionality to delete decks
5. Display cards within a selected deck
6. Allow reordering of cards within a deck
7. Provide options to add or remove cards from a deck
8. Allow exporting decks to JSON

## Component Structure
```typescript
const DeckManager: React.FC = () => {
  // State management
  // CRUD operations for decks
  // Card management within decks
  // JSON export functionality

  return (
    <div className="deck-manager">
      {/* Deck list */}
      {/* New deck button */}
      {/* Selected deck details */}
      {/* Card list for selected deck */}
      {/* Export to JSON button */}
    </div>
  );
};
```

## Key Functions
- createDeck(name: string, description?: string): void
- updateDeck(id: string, name: string, description?: string): void
- deleteDeck(id: string): void
- selectDeck(id: string): void
- addCardToDeck(deckId: string, cardId: string): void
- removeCardFromDeck(deckId: string, cardId: string): void
- reorderCardsInDeck(deckId: string, startIndex: number, endIndex: number): void
- exportDeckToJSON(deckId: string): void

## State Management
- Use local state for UI-specific properties (selected deck, edit mode)
- Use useDeck hook for deck-related operations and state

## TODO
- [ ] Implement deck list display
- [ ] Create new deck functionality
- [ ] Add deck editing and deletion features
- [ ] Implement deck selection
- [ ] Create card list display for selected deck
- [ ] Add drag-and-drop reordering for cards
- [ ] Implement add/remove card functionality
- [ ] Add JSON export functionality
- [ ] Write unit tests for CRUD operations
- [ ] Integrate with storage service for persistence----------------------------------------

File: ./src/components/decks/DeckList.md
----------------------------------------
# DeckList

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/common/Input.md
----------------------------------------
# Input

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/common/Modal.md
----------------------------------------
# Modal

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/common/Button.md
----------------------------------------
# Button

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/components/common/ColorPicker.md
----------------------------------------
# ColorPicker

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/index.md
----------------------------------------
# index

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/hooks/useCanvas.md
----------------------------------------
# useCanvas

## Purpose
The useCanvas hook manages the state and operations for the canvas used in the CardEditor component.

## Dependencies
- react
- konva
- ../types/Shape

## Functionality
1. Manage canvas state (shapes, selected shape, etc.)
2. Provide functions for adding, modifying, and deleting shapes
3. Handle shape selection and deselection
4. Manage undo/redo functionality

## Hook Structure
```typescript
const useCanvas = (initialShapes: Shape[] = []) => {
  // State management
  // Shape manipulation functions
  // Undo/redo logic

  return {
    shapes,
    selectedShape,
    addShape,
    updateShape,
    deleteShape,
    selectShape,
    undo,
    redo,
  };
};
```

## TODO
- [ ] Implement shape state management
- [ ] Create shape manipulation functions
- [ ] Add selection logic
- [ ] Implement undo/redo functionality
- [ ] Write unit tests----------------------------------------

File: ./src/hooks/useDeck.md
----------------------------------------
# useDeck

## Purpose
The useDeck hook manages deck-related operations and state, providing an interface for components to interact with deck data.

## Dependencies
- react
- ../services/storage
- ../types/Deck
- ../types/Card

## Functionality
1. Fetch and manage deck data
2. Provide CRUD operations for decks
3. Handle card management within decks
4. Manage deck selection state

## Hook Structure
```typescript
const useDeck = () => {
  // Deck state management
  // CRUD operations
  // Card management functions

  return {
    decks,
    selectedDeck,
    createDeck,
    updateDeck,
    deleteDeck,
    selectDeck,
    addCardToDeck,
    removeCardFromDeck,
    reorderCardsInDeck,
  };
};
```

## TODO
- [ ] Implement deck state management
- [ ] Create CRUD operations for decks
- [ ] Add card management functions
- [ ] Integrate with storage service
- [ ] Write unit tests----------------------------------------

File: ./src/pages/Editor.md
----------------------------------------
# Editor

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/pages/Home.md
----------------------------------------
# Home

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/pages/DeckManagement.md
----------------------------------------
# DeckManagement

## Purpose
[Briefly describe the purpose of this file/component]

## Dependencies
- [List any dependencies]

## Props (if applicable)
- [List props and their types]

## Main Functionality
[Describe the main functionality or responsibilities]

## TODO
- [ ] Implement basic structure
- [ ] Add necessary logic
- [ ] Write unit tests
----------------------------------------

File: ./src/services/storage.md
----------------------------------------
# useDeck

## Purpose
The useDeck hook manages deck-related operations and state, providing an interface for components to interact with deck data.

## Dependencies
- react
- ../services/storage
- ../types/Deck
- ../types/Card

## Functionality
1. Fetch and manage deck data
2. Provide CRUD operations for decks
3. Handle card management within decks
4. Manage deck selection state

## Hook Structure
```typescript
const useDeck = () => {
  // Deck state management
  // CRUD operations
  // Card management functions

  return {
    decks,
    selectedDeck,
    createDeck,
    updateDeck,
    deleteDeck,
    selectDeck,
    addCardToDeck,
    removeCardFromDeck,
    reorderCardsInDeck,
  };
};
```

## TODO
- [ ] Implement deck state management
- [ ] Create CRUD operations for decks
- [ ] Add card management functions
- [ ] Integrate with storage service
- [ ] Write unit tests----------------------------------------

File: ./src/services/api.md
----------------------------------------
# API Service

## Purpose
The API service handles all communications with external APIs, including potential future backend services.

## Dependencies
- axios
- ../types/Card
- ../types/Deck

## Main Functionality
1. Handle API requests for future backend integration
2. Manage authentication (if implemented in the future)
3. Provide interfaces for data synchronization

## Service Structure
```typescript
class ApiService {
  private axiosInstance: AxiosInstance;

  constructor();
  
  // Authentication methods (for future use)
  login(credentials: Credentials): Promise<User>;
  logout(): Promise<void>;

  // Data synchronization methods
  syncCards(cards: Card[]): Promise<Card[]>;
  syncDecks(decks: Deck[]): Promise<Deck[]>;

  // Other API methods as needed
}
```

## TODO
- [ ] Set up Axios instance
- [ ] Implement authentication methods (placeholder for now)
- [ ] Create data synchronization methods
- [ ] Add error handling and request/response interceptors
- [ ] Write unit tests
- [ ] Document API endpoints and expected responses----------------------------------------

Summary:
Total lines of user-generated content: 1387
